
plugins {
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "6+"
}

version = "0.1"
group = "com.github.dashiedev"
archivesBaseName = "WorkingDogs-${project.target_mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources.srcDirs += "src/generated/resources"
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier = "api"
    from sourceSets.api.output
    from sourceSets.api.allJava
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {

    mappings channel: "official", version: "1.20.1"

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            taskName "workingdogs_client"
            workingDirectory file("run")
            property "forge.logging.console.level", "debug"
            mods {
                doggytalents.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            taskName "workingdogs_server"
            workingDirectory file("run-server")
            property "forge.logging.console.level", "debug"
            mods {
                doggytalents.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            taskName "workingdogs_data"
            workingDirectory file("run")
            property "forge.logging.console.level", "debug"
            args "--mod", "doggytalents", "--all", "--output", '"' + file("src/generated/resources/") + '"', "--existing", '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                doggytalents.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.1.0"

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "Working Dogs",
            "Specification-Vendor": "tanysfoster",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"tanysfoster",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}
