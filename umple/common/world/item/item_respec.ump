
class AmnesiaBoneItem {
depend java.util.List;
depend java.util.UUID;
depend net.minecraft.nbt.Tag;
depend net.minecraft.network.chat.Component;
depend net.minecraft.world.entity.player.Player;
depend net.minecraft.world.item.Item;
depend net.minecraft.world.level.Level;
isA IDogItem;
isA Item;

	const Integer MigrateOwnerXPCost = 5;
	const Integer UntameXPCost = 3;
	const Integer UseCap = 8;

	@Override
	public void appendHoverText(ItemStack stack, Level level, List<Component> components, TooltipFlag flag) {
		var tag = stack.getTag();
		if (tag == null)
			return;
		if (tag.contains("amnesia_bone_used_time", Tag.TAG_INT)) {
			components.add(Component.translatable(
					"item.doggytalents.amnesia_bone.use_status"
					, UseCap - tag.getInt("amnesia_bone_used_time")
					, UseCap)
				.withStyle(ChatFormatting.RED));
		}
		if (tag.contains("request_str", Tag.TAG_STRING)) {
			components.add(Component.translatable("item.doggytalents.amnesia_bone.status", tag.getString("request_str"))
					.withStyle(ChatFormatting.GRAY));
		}
	}

	@Override
	public InteractionResult processInteract(AbstractDog dog, Level level, Player player, InteractionHand hand) {
		var ownerUUID = dog.getOwnerUUID();
		if (ownerUUID == null) {
			return InteractionResult.FAIL;
		}
		if (level.isClientSide) {
			handleOpenScreenOnClient(level, dog, player, hand, ownerUUID);
			return InteractionResult.SUCCESS;
		}
		requestOwnership(level, ownerUUID, player, hand, dog);
		return InteractionResult.SUCCESS;
	}

	/* */
	private void handleOpenScreenOnClient(Level level, AbstractDog dogIn, Player player, InteractionHand hand,
			UUID dogOwnerUUID) {
		if (!level.isClientSide)
			return;
		if (hand != InteractionHand.MAIN_HAND)
			return;
		if (!(dogIn instanceof Dog dog))
			return;
		if (dogOwnerUUID.equals(player.getUUID())) {
			AmneisaBoneScreen.open(dog);
			return;
		}
		boolean isOpAndCreative = player.hasPermissions(4) && player.getAbilities().instabuild;
		if (isOpAndCreative && player.isShiftKeyDown()) {
			DogForceMigrateOwnerScreen.open(dog);
		}
	}

	private void requestOwnership(Level level, UUID ownerUUID, Player player, InteractionHand hand, AbstractDog dog) {
		if (level.isClientSide)
			return;
		var playerUUID = player.getUUID();
		if (ownerUUID.equals(playerUUID)) {
			return;
		}
		;
		if (!(dog instanceof Dog))
			return;
		var d = (Dog) dog;
		if (!d.willObeyOthers()) {
			player.displayClientMessage(
					Component.translatable("item.doggytalents.amnesia_bone.reject").withStyle(ChatFormatting.RED),
					true);
			return;
		}
		var stack = player.getItemInHand(hand);
		if (stack.getItem() != this)
			return;
		var tag = stack.getOrCreateTag();
		if (tag.hasUUID("request_uuid") && tag.getUUID("request_uuid").equals(playerUUID))
			return;
		tag.putUUID("request_uuid", player.getUUID());
		tag.putString("request_str", player.getName().getString());
	}

}
